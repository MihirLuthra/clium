#! /usr/bin/env bash

# don't source the script twice
[ -n "${__DATA_INTERFACE_UTILITY_FUNCS__}" ] && return 0
readonly __DATA_INTERFACE_UTILITY_FUNCS__=1

COMMON_PATH="$QUICKTEST_PATH/src/scripts/common"
source "$COMMON_PATH"/constants
source "$COMMON_PATH"/error_handler

current_user_config_path() {
	local user_config
	local user_config_full_path

	user_config="$(get_from_current_defaults "$USER_CONFIG_FILE_KEY")" || return_error

	user_config_full_path="$USER_CONFIG_FILES_DIR/$user_config"

	print_if_not_file "$user_config_full_path" && return_error

	printf "%s" "$user_config_full_path"
}

current_boilerplate_path() {
	local boilerplate
	local boilerplate_full_path

	boilerplate="$(get_from_user_config_file "$BOILERPLATE_KEY")" || return_error

	boilerplate_full_path="$BOILERPLATE_FILES_DIR/$boilerplate"

	print_if_not_file "$boilerplate_full_path" && return_error

	printf "%s" "$boilerplate_full_path"
}

current_instance_path() {
	local instance
	local instance_full_path

	instance="$(get_from_current_defaults "$INSTANCE_KEY")" || return_error

	instance_full_path="$INSTANCES_DIR/$instance"

	print_if_not_file "$instance_full_path" && return_error

	printf "%s" "$instance_full_path"
}

get_from_user_config_file_or_default() {
	local key=$1

	get_from_user_config_file "$key"

	if [ $? -ne 0 ]
	then
		a_echo_err "Error in getting key from user config file, trying default user config file"
		get_from_default_user_config_file "$key" || return_error
	fi
}
