#! /usr/bin/env bash

# don't source the script twice
[ -n "${__ERROR_BASH__}" ] && return 0
readonly __ERROR_BASH__=1

echo_err() {
	>&2 echo "$@"
}

cecho_err() {

	local red='\033[0;31m'
	local default_color='\033[0m'

	echo_err "$red$@$default_color"
}

printf_err() {
	>&2 printf "$@"
}

cprintf_err() {

	local red='\033[0;31m'
	local default_color='\033[0m'

	printf_err "$red$@$default_color"
}

#
# param1:
#  path to normalize.
#
# Description:
#  Just gets the absolute path without a trailing forward slash
#  Doesn't resolve symlinks.
#
# retval:
#  1 on error
#
quicktest_path_normalize() {
	local path="$1" ; shift
	local abs_path_dir
	local abs_path

	if [ -z "${path}" ] ; then
		echo_err "${BASH_SOURCE}: Line ${LINENO}: param1(path) is empty"
		return 1
	fi

	abs_path="$( cd "$( dirname ${path} )" ; pwd )/$( basename ${path} )"

	printf "$abs_path"
}

alias a_echo_err='echo_err "$( quicktest_path_normalize "$BASH_SOURCE" ): Line $LINENO: " '
alias a_cecho_err='cecho_err "$( quicktest_path_normalize "$BASH_SOURCE" ): Line $LINENO: " '
alias a_printf_err='printf_err "$( quicktest_path_normalize "$BASH_SOURCE" ): Line $LINENO: " '
alias a_cprintf_err='cprintf_err "$( quicktest_path_normalize "$BASH_SOURCE" ): Line $LINENO: " '

alias return_if_error='
	if [ $? -ne 0 ] ; then
		a_echo_err "${FUNCNAME[0]}() failed"
		return 1
	fi
'
shopt -s expand_aliases

print_if_key_is_null() {
	if [ -z "$2" ]
	then
		a_echo_err "key $1 is empty"
		return 0
	fi

	return 1
}

print_if_not_file() {
	if [ ! -f "$1" ]
	then
		a_echo_err "$1 : No such file"
		return 0
	fi

	return 1
}

exists_but_not_file() {
	if [ ! -f "$1" ] && [ -e "$1" ]
	then
		a_echo_err "$1 exists but isn't a file"
		return 0
	fi

	return 1
}
