#! /usr/bin/env bash

set -e
source "$CLIUM_SOURCE_PATH"/error_handler
source "$CLIUM_SOURCE_PATH"/constants
source "$CLIUM_SOURCE_PATH"/utility_funcs
source "$CLIUM_SOURCE_PATH"/data_interface
source "$CLIUM_SOURCE_PATH"/option_parser
source "$CLIUM_SOURCE_PATH"/common_options
set +e

print_usage() {

	printf_err "%s\n"                             \
	'clium open'                                  \
	'    [<relative_count>]'                      \
	'    [-b|--boilerplate [<boilerplate_name>]]' \
	'    [--config-file]'                         \
	'    [-e|--extension-map]'                    \
	'    [-h|--help]'                             \
	'    [-i|--instance [<instance_name>]]'       \
	'    [-l|--last]'                             \
	'    [-n|--new]'                              \
	'    [-u|--user-config [<user_config_name>]]'

}

parse_open_options() {

	local option_parser_retval

	parse_options \
		'open'                   '-1' \
		                              \
		'-b' , '--boilerplate'   '-1' \
		'--config-file'          '0'  \
		'-e' , '--extension-map' '0'  \
		'-h' , '--help'          '0'  \
		'-i' , '--instance'      '-1' \
		'-l' , '--last'          '0'  \
		'-n' , '--new'           '0'  \
		'-u' , '--user-config'   '-1' \
		                              \
		';'                           \
		"$@"

	option_parser_retval=$?

	if [ $option_parser_retval -ne 0 ] ; then
		option_parser_error_msg $option_parser_retval
		print_usage
		return_error
	fi

}

option_boilerplate() {
	local boilerplate_full_path

	boilerplate_full_path="$( arg_or_fzf_search "$BOILERPLATE_FILES_DIR" "SELECT BOILERPLATE(-b):" '-b' )" \
		|| return_error

	touch "$boilerplate_full_path" || return_error

	printf "%s" "$boilerplate_full_path"
}

option_extension_map() {
	open_file "$EXTENSION_MAP_FILE_PATH" || return_error
}

construct_user_config_full_path_and_set_in_defaults() {
	local user_config=$1

	[ -z "$user_config" ] && {
		a_printf_err "user config is empty"
		return_error
	}

	user_config_full_path="$USER_CONFIG_FILES_DIR/$user_config"
	print_if_not_file "$user_config_full_path" && return_error

	set_in_current_defaults "$USER_CONFIG_FILE_KEY" "$user_config" || return_error

	touch "$user_config_full_path"

	printf "%s" "$user_config_full_path"
}

option_user_config() {
	local user_config
	local user_config_full_path

	if [ ${ARG_CNT[-u]:-0} -eq 1 ]
	then
		user_config=${ARGS[-u,0]}
	else
		user_config="$( fzf_search "SELECT USER CONFIG(-u)" "$USER_CONFIG_FILES_DIR" )" || return_error
		[ -z "$user_config" ] && return_error
	fi

	construct_user_config_full_path_and_set_in_defaults "$user_config" || return_error
}

#
# Description:
#   Would check if ARGS[-i,?] contains anything. If not would
#   provide user a fzf search menu to search for the desired instance.
#   If the instance doesn't exist, it would be created with all directories
#   in between.
#   At the end, intance's full path would be echoed.
#
option_instance() {
	local instance
	local instance_full_path
	local dir

	if [ ${ARG_CNT[-i]:-0} -eq 1 ]
	then
		instance=${ARGS[-i,0]}
	else
		instance="$( fzf_search "SELECT INSTANCE(-i):" "$INSTANCES_DIR" )" || return_error
		[ -z "$instance" ] && return_error
	fi

	instance_full_path="$INSTANCES_DIR/$instance"

	exists_but_not_file "$instance_full_path" && return_error

	dir="$( dirname "$instance_full_path" )" || return_error
	mkdir -p "$dir" || return_error

	set_in_current_defaults "$INSTANCE_KEY" "$instance" || return_error

	touch "$instance_full_path" || return_error

	printf "%s" "$instance_full_path"
}

get_user_config_full_path_by_extension() {
	local instance_full_path=$1
	local extension
	local user_config

	extension="${instance_full_path##*.}"

	user_config="$( get_value_for_key "$EXTENSION_MAP_FILE_PATH" "$extension" )" || return_error

	construct_user_config_full_path_and_set_in_defaults "$user_config" || return_error
}

instance_by_relative_cnt() {
	local instance
	local instance_full_path

	instance="$( get_by_relative_cnt "$INSTANCES_DIR" "${ARGS[open,0]}")" || return_error

	instance_full_path="$INSTANCES_DIR/$instance"

	exists_but_not_file "$instance_full_path" && return_error

	set_in_current_defaults "$INSTANCE_KEY" "$instance" || return_error

	touch "$instance_full_path"

	printf "%s" "$instance_full_path"
}

option_help() {
	less "$( dirname $BASH_SOURCE )/help.txt"
}

write_boilerplate_to_instance() {
	local boilerplate_path=$1 ; shift
	local instance_path=$1 ; shift

	prompt_if_overwrite "$instance_path" || return_error

	fpreprocess < "$boilerplate_path" > "$instance_path" || return_error
}

open() {
	local boilerplate_full_path
	local user_config_full_path
	local instance_full_path
	local default_options

	if [ -z "$*" ]
	then
		default_options="$( get_default_args )" || return_error
		eval set -- $default_options
	fi

	parse_open_options "$@" || return_error

	if [ -n "${OPTIONS[-h]}" ]
	then
		option_help
		return 0
	fi

	if [ -n "${OPTIONS[--config-file]}" ]
	then
		option_config_file || return_error
		return 0
	fi

	if [ -n "${OPTIONS[-e]}" ]
	then
		option_extension_map || return_error
		return 0
	fi

	if [ -n "${OPTIONS[-i]}" ]
	then
		instance_full_path="$(option_instance)" || return_error
	else
		if [ -n "${ARGS[open,0]}" ]
		then
			instance_full_path="$(instance_by_relative_cnt)" || return_error
		else
			instance_full_path="$(current_instance_path)" || return_error
		fi
	fi

	if [ -n "${OPTIONS[-u]}" ]
	then
		user_config_full_path="$(option_user_config)" || return_error
	else
		# if -u is not passed and -i is passed, try to infer user config file by extension
		# using extension map.
		if [ -n "${OPTIONS[-i]}" ]
		then
			user_config_full_path="$( get_user_config_full_path_by_extension "$instance_full_path" )"
		fi

		if [ -z "$user_config_full_path" ]
		then
			user_config_full_path="$(current_user_config_path)" || return_error
		fi
	fi

	if [ -n "${OPTIONS[-l]}" ]
	then
		instance_full_path="$(current_instance_path)" || return_error
	fi

	if [ -n "${OPTIONS[-n]}" ]
	then
		if [ -n "${OPTIONS[-b]}" ]
		then
			boilerplate_full_path="$(option_boilerplate)" || return_error
		else
			boilerplate_full_path="$(current_boilerplate_path)" || return_error
		fi

		write_boilerplate_to_instance "$boilerplate_full_path" "$instance_full_path" || return_error
	fi

	open_file "$instance_full_path" || return_error

	return 0
}

open "$@"
