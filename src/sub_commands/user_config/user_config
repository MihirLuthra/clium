#! /usr/bin/env bash

set -e
source "$QT_COMMON_PATH"/error_handler
source "$QT_COMMON_PATH"/constants
source "$QT_COMMON_PATH"/utility_funcs
source "$QT_COMMON_PATH"/data_interface
source "$QT_COMMON_PATH"/option_parser
source "$QT_COMMON_PATH"/common_options
set +e

print_usage() {

	printf_err "%s\n"                                  \
	'quicktest user_config'                            \
	'    [<relative_cnt>]'                             \
	'    [-c|--current]'                               \
	'    [--config-file]'                              \
	'    [-d|--delete <user_config_file_name>...]'     \
	'    [-h|--help]'                                  \
	'    [-m|--modify <user_config_file_name>...]'     \
	'    [-n|--new <user_config_file_name>]'           \
	'    [-p|--path]'                                  \
	'    [-r|--rename [<old_name>] <new_name>]'        \
	'    [-s|--show-all]'

}

parse_user_config_options() {

	local option_parser_retval

	parse_options \
		'user_config'                     '-1'               \
		\
		'-c' , '--current'                '0'                \
		'--config-file'                   '0'                \
		'-d' , '--delete'                 '...'              \
		'-h' , '--help'                   '0'                \
		'-m' , '--modify'                 '...'              \
		'-n' , '--new'                    '1'                \
		'-p' , '--path'                   '0'                \
		'-r' , '--rename'                 '1 -1'             \
		'-s' , '--show-all'               '0'                \
		                                                     \
		';'                                                  \
		"$@"

	option_parser_retval=$?

	if [ $option_parser_retval -ne 0 ] ; then
		option_parser_error_msg $option_parser_retval
		print_usage
		return_error
	fi

}

user_config_by_relative_cnt() {
    local user_config
    local user_config_full_path

    user_config="$( get_by_relative_cnt "$USER_CONFIG_FILES_DIR" "${ARGS[user_config,0]}")" || return_error

    user_config_full_path="$USER_CONFIG_FILES_DIR/$user_config"

    exists_but_not_file "$user_config_full_path" && return_error

    set_in_current_defaults "$USER_CONFIG_FILE_KEY" "$user_config" || return_error

    open_file "$user_config_full_path" || return_error
}

option_current() {
	local user_config

	user_config="$(get_from_current_defaults "$USER_CONFIG_FILE_KEY")" || return_error

	printf "%s\n" "$user_config"
}

option_delete() {
	delete_files "$USER_CONFIG_FILES_DIR" "SELECT USER CONFIG(-d)" || return_error
}

option_modify() {
	open_files "$USER_CONFIG_FILES_DIR" "SELECT USER CONFIG(-u)" '-u' || return_error
}

option_new() {
	local user_config
	local user_config_full_path
	local dir

	user_config=${ARGS[-n,0]}
	user_config_full_path="$USER_CONFIG_FILES_DIR/$user_config"

	exists_but_not_file "$user_config_full_path" && return_error

	dir="$( dirname "$user_config_full_path" )" || return_error
	mkdir -p "$dir" || return_error

	open_file "$user_config_full_path" || return_error
}

option_path() {
	printf "%s\n" "$(current_user_config_path)"
}

option_rename() {
	rename_file "$USER_CONFIG_FILES_DIR" || return_error
}

option_show_all() {
	list_time_sorted "$USER_CONFIG_FILES_DIR" || return_error
}

user_config() {
	local default_options

	if [ -z "$*" ]
	then
		default_options="$( get_default_args )" || return_error
		eval set -- $default_options
	fi

	parse_user_config_options "$@" || return_error

	for option in "${!OPTIONS[@]}"
	do
		case "$option" in
			user_config)
				user_config_by_relative_cnt || return_error
				;;
			-c)
				option_current || return_error
				;;
			--config-file)
				option_config_file || return_error
				;;
			-d)
				option_delete || return_error
				;;
			-h)
				option_help || return_error
				;;
			-m)
				option_modify || return_error
				;;
			-n)
				option_new || return_error
				;;
			-p)
				option_path || return_error
				;;
			-r)
				option_rename || return_error
				;;
			-s)
				option_show_all || return_error
				;;
		esac
	done

	return 0
}

user_config "$@"
