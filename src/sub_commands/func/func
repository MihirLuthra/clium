#! /usr/bin/env bash

set -e
source "$CLIUM_SOURCE_PATH"/error_handler
source "$CLIUM_SOURCE_PATH"/constants
source "$CLIUM_SOURCE_PATH"/utility_funcs
source "$CLIUM_SOURCE_PATH"/data_interface
source "$CLIUM_SOURCE_PATH"/option_parser
source "$CLIUM_SOURCE_PATH"/common_options

source "$SUB_COMMANDS_DIR"/func/func_error_handler
set +e

print_usage() {
	printf_err "%s\n"                            \
	'clium func'                                 \
	'    [<func_name> [<func_args>]]'            \
	'    [-a|--alias-file]'                      \
	'    [-c|--create-func <func_name>]'         \
	'    [--config-file]'                        \
	'    [-d|--delete <func_name>...]'           \
	'    [-h|--help]'                            \
	'    [-m|--modify-func <func_name>...]'      \
	'    [-r|--rename [<old_name>] <new_name>]'  \
	'    [--rename-file]'                        \
	'    [-s|--show-all]'
}

parse_func_options() {
	local option_parser_retval

	parse_options \
		'func'                  '...'  \
		'-a' , '--alias-file'   '0'    \
		'-c' , '--create-func'  '1'    \
		'--config-file'         '0'    \
		'-d' , '--delete'       '...'  \
		'-h' , '--help'         '0'    \
		'-m' , '--modify-func'  '-1'   \
		'-r' , '--rename'       '...'  \
		       '--rename-file'  '0'    \
		'-s' , '--show-all'     '0'    \
		                               \
		';' \
		"$@"

	option_parser_retval=$?

	if [ $option_parser_retval -ne 0 ] ; then
		option_parser_error_msg $option_parser_retval
		print_usage
		return_error
	fi
}

self_actions() {
	local func_name
	local func_path
	local args

	func_name=${ARGS[func,0]}

	print_if_func_name_invalid "$func_name" && return_error

	if [ -f "$PROGRAM_FUNC_DIR/$func_name" ]
	then
		func_path="$PROGRAM_FUNC_DIR/$func_name"
	elif [ -f "$USER_FUNC_DIR/$func_name" ]
	then
		func_path="$USER_FUNC_DIR/$func_name"
	else
		a_echo_err "$func_name: function not found"
		return_error
	fi

	args="$(forward_args 'func' '1')" || return_error

	"$CLIUM_BASH" -c ""$CLIUM_BASH" $func_path $args" || return_error
}

option_alias_file() {
	open_file "$ALIAS_FILE_PATH" || return_error
}

option_create_func() {
	local func_name
	local func_path
	local contents

	func_name=${ARGS[-c,0]}

	print_if_func_name_invalid "$func_name" && return_error

	func_path="$USER_FUNC_DIR/$func_name"

	prompt_if_overwrite "$func_path" || return_error

	contents=$( < "$FUNC_TEMPLATE" )

	replace                   \
	    "$FUNC_NAME_REPLACEE" \
	    "$func_name"          \
	    "$contents"           \
	    > "$func_path"        \
	    || return_error

	chmod u=rwx,go-rwx "$func_path" || {
		rm -f "$func_path"
		return_error
	}

	mkdir -p "$FUNC_DUMP_DIR/$func_name" || return_error

	open_file "$func_path" || return_error
}

option_delete() {
	local action

	# FIXME : rm -rf $FUNC_DUMP_DIR/__TO_REPLACE__ is wrong
	action='rm -i __TO_REPLACE__ ; rm -rf $FUNC_DUMP_DIR/__TO_REPLACE__'
	args_or_fzf_multi_search "$USER_FUNC_DIR" "SELECT FUNC(-d)" '-d' "$action" '__TO_REPLACE__' '1' > /dev/null \
		|| return_error
}

option_modify_func() {
	open_files "$USER_FUNC_DIR" "SELECT FUNC(-m)" '-m' || return_error
}

option_rename() {
	rename_file "$USER_FUNC_DIR" || return_error
}

option_rename_file() {
	open_file "$RENAME_FILE_PATH" || return_error
}

option_show_all() {
	list_time_sorted "$USER_FUNC_DIR" || return_error
}

func() {
	local default_options

	if [ -z "$*" ]
	then
		default_options="$( get_default_args )" || return_error
		eval set -- $default_options
	fi

	parse_func_options "$@" || return_error

	for option in "${!OPTIONS[@]}"
	do
		case "$option" in
			func)
				self_actions || return_error
				;;
			-a)
				option_alias_file || return_error
				;;
			-c)
				option_create_func || return_error
				;;
			--config-file)
				option_config_file || return_error
				;;
			-d)
				option_delete || return_error
				;;
			-h)
				option_help
				;;
			-m)
				option_modify_func || return_error
				;;
			-r|--rename)
				option_rename || return_error
				;;
			--rename-file)
				option_rename_file || return_error
				;;
			-s)
				option_show_all || return_error
				;;
		esac
	done

	return 0
}

func "$@"
