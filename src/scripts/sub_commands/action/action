#! /usr/bin/env bash

COMMON_PATH="$QUICKTEST_PATH/"src/scripts/common

set -e
source "$COMMON_PATH"/error_handler
source "$COMMON_PATH"/constants
source "$COMMON_PATH"/utility_funcs
source "$COMMON_PATH"/data_interface
source "$COMMON_PATH"/option_parser
source "$SUB_COMMANDS_DIR"/common_options
set +e

print_usage() {
	printf_err "%s\n"                                \
	'quicktest action [<key_for_action>]'            \
	'    [--config-file]'                            \
	'    [-d|--delete <action_name>]'                \
	'    [-h|--help]'                                \
	'    [-r|--register <action_name> <action_key>]' \
	'    [-s|--show-all]'
}

parse_action_options() {
	local option_parser_retval

	parse_options \
		'action'                 '...'                   \
		\
		'--config-file'          '0'                     \
		'-d' , '--delete'        '-1'                    \
		'-h' , '--help'          '0'                     \
		'-r' , '--register'      '1 1'                   \
		'-s' , '--show-all'      '0'                     \
		                                                 \
		';'                                              \
		"$@"

	option_parser_retval=$?

	if [ $option_parser_retval -ne 0 ] ; then
		option_parser_error_msg $option_parser_retval
		print_usage
		return_error
	fi
}

self_actions() {
	local action_key
	local action
	local action_args
	local last_arg

	action_key=${ARGS[action,0]}

	action="$( get_from_user_config_file "$action_key" )" || return_error

	action="$( fpreprocess <<<"$action" )" || return_error

	last_arg="$( expr ${ARG_CNT[action]} - 1 )"

	if [ $last_arg -ge 1 ]
	then
		for arg_no in $(seq 1 "$last_arg")
		do
			action_args="$action_args $( put_single_quotes "${ARGS[action,"$arg_no"]}" )" || return_error
		done
	fi

	"$QTBASH" -c "$action $action_args"
}

option_delete() {
	delete_files "$USER_COMMANDS_DIR" "SELECT ACTION(-d)" || return_error
}

option_register() {
	local action_name
	local action_key
	local new_action_path
	local contents

	action_name=${ARGS[-r,0]}
	action_key=${ARGS[-r,1]}

	new_action_path="$USER_COMMANDS_DIR/$action_name"

	prompt_if_overwrite "$new_action_path" || return_error

	contents="$( < $USER_COMMAND_TEMPLATE )"

	replace                    \
		"$ACTION_KEY_REPLACEE" \
		"$action_key"          \
		"$contents"            \
		> "$new_action_path"   \
		|| return_error

	chmod u=rx,go-rwx "$new_action_path" || {
		rm -f "$new_action_path"
		return_error
	}
}

option_show_all() {
	list_time_sorted "$USER_COMMANDS_DIR" || return_error
}

action() {
	local default_options

	if [ -z "$*" ]
	then
		default_options="$( get_default_args )" || return_error
		eval set -- $default_options
	fi

	parse_action_options "$@" || return_error

	if [ "${ARG_CNT[action]:-0}" -ne 0 ]
	then
		self_actions || return_error
		return 0
	fi

	for option in "${!OPTIONS[@]}"
	do
		case "$option" in
			--config-file)
				option_config_file || return_error
				;;
			-d)
				option_delete || return_error
				;;
			-h)
				option_help
				;;
			-r)
				option_register || return_error
				;;
			-s)
				option_show_all || return_error
				;;
		esac
	done

	return 0
}

action "$@"
