#! /usr/bin/env bash

#
# TODO:
#  add --get option
#  update current boilerplate on deletion
#
#

COMMON_PATH="$QUICKTEST_PATH/"src/scripts/common

set -e
source "$COMMON_PATH"/error_handler
source "$COMMON_PATH"/constants
source "$COMMON_PATH"/utility_funcs
source "$COMMON_PATH"/data_interface
source "$COMMON_PATH"/option_parser
source "$SUB_COMMANDS_DIR"/common_options
set +e

print_usage() {
	printf_err "%s\n"                                  \
	'quicktest boilerplate'                            \
	'    [realtive_cnt]'                               \
	'    [-c|--current]'                               \
	'    [--config-file]'                              \
	'    [-d|--delete <boilerplate_name>]'             \
	'    [-h|--help]'                                  \
	'    [-m|--modify [<boilerplate_name>]]'           \
	'    [-n|--new <boilerplate_name>]'                \
	'    [-p|--path]'                                  \
	'    [-s|--show-all]'
}

parse_boilerplate_options() {
	local option_parser_retval

	parse_options \
		'boilerplate'                     '-1'               \
		\
		'-c' , '--current'                '0'                \
		'--config-file'                   '0'                \
		'-d' , '--delete'                 '-1'               \
		'-h' , '--help'                   '0'                \
		'-m' , '--modify'                 '-1'               \
		'-n' , '--new'                    '1'                \
		'-p' , '--path'                   '0'                \
		'-s' , '--show-all'               '0'                \
		                                                     \
		';'                                                  \
		"$@"

	option_parser_retval=$?

	if [ $option_parser_retval -ne 0 ] ; then
		option_parser_error_msg $option_parser_retval
		print_usage
		return_error
	fi
}

boilerplate_by_relative_cnt() {
    local boilerplate
    local boilerplate_full_path

    boilerplate="$( get_by_relative_cnt 'boilerplate' "$BOILERPLATE_FILES_DIR" )" || return_error

    boilerplate_full_path="$BOILERPLATE_FILES_DIR/$boilerplate"

    exists_but_not_file "$boilerplate_full_path" && return_error

    set_in_current_defaults "$BOILERPLATE_KEY" "$boilerplate" || return_error

    open_file "$boilerplate_full_path" || return_error
}

option_current() {
	local boilerplate

	boilerplate="$(get_from_user_config_file "$BOILERPLATE_KEY")" || return_error

	printf "%s\n" "$boilerplate"
}

option_delete() {
	delete_files "$BOILERPLATE_FILES_DIR" "SELECT BOILERPLATE(-d)" || return_error
}

option_modify() {
	open_files "$BOILERPLATE_FILES_DIR" "SELECT BOILERPLATE(-m)" '-m' || return_error
}

option_new() {
	local boilerplate
	local boilerplate_full_path

	boilerplate=${ARGS[-n,0]}
	boilerplate_full_path="$BOILERPLATE_FILES_DIR/$boilerplate"

	exists_but_not_file "$boilerplate_full_path" && return_error

	open_file "$boilerplate_full_path" || return_error
}

option_path() {
	local boilerplate_full_path

	boilerplate_full_path="$BOILERPLATE_FILES_DIR/$(option_current)"

	printf "%s\n" "$boilerplate_full_path"
}

option_show_all() {
	list_time_sorted "$BOILERPLATE_FILES_DIR" || return_error
}

boilerplate() {
	local default_options

	if [ -z "$*" ]
	then
		default_options="$( get_default_args )" || return_error
		eval set -- $default_options
	fi

	parse_boilerplate_options "$@" || return_error

	for option in "${!OPTIONS[@]}"
	do
		case "$option" in
			boilerplate)
				boilerplate_by_relative_cnt || return_error
				;;
			-c)
				option_current || return_error
				;;
			--config-file)
				option_config_file || return_error
				;;
			-d)
				option_delete || return_error
				;;
			-h)
				option_help || return_error
				;;
			-m)
				option_modify || return_error
				;;
			-n)
				option_new || return_error
				;;
			-p)
				option_path || return_error
				;;
			-s)
				option_show_all || return_error
				;;
		esac
	done

	return 0
}

boilerplate "$@"
