#! /usr/bin/env bash

# don't source the script twice
[ -n "$__UTILS__" ] && return 0
readonly __UTILS__=1

set -e
source "$CLIUM_SOURCE_PATH"/error_handler
source "$CLIUM_SOURCE_PATH"/constants
source "$CLIUM_SOURCE_PATH"/data_interface
set +e

is_num() {
	case "$1" in
	''|*[!0-9]*) return 1 ;;
	*) return 0 ;;
	esac
}

# trims leading and trailing spaces
# also if more than one blank exists, it trims it to single blank
trim_blanks() {
	gawk '{$1=$1}1' <<<"$1" || return_error
}

# to trim leading and trailing blanks
trim() {

	gawk '{
		# trim leading spaces
		sub(/^ +/, "", $0)
		sub(/^\t+/, "", $0)

		# trim trailing spaces
		sub(/ +$/, "", $0)
		sub(/\t+$/, "", $0)
	}1' <<<"$1" || return_error
}

first_word() {
	gawk '{print $1}' <<<"$1" || return_error
}

bold_echo() {
	echo -n "$BOLD"
	echo "$@"
	echo -n "$OFF_BOLD"
}

bold_printf() {
	printf "$BOLD"
	printf "$@"
	printf "$OFF_BOLD"
}

list_time_sorted_null_term() {
	local from_dir=$1 ; shift
	cdirt "$from_dir" || return_error
}

#
# Old implementation of list_time_sorted_null_term
#
# This function lists the contents of directory param1
# in the order of inode modification time (ctime).
# The output of this function is \0 delimited.
#
# list_time_sorted_null_term() {
# 	local from_dir=$1 ; shift
# 	local name

# 	while IFS= read -r -d '' file
# 	do
# 		name=${file##$from_dir/}

# 		# ignore hidden directories and files
# 		case "$name" in
# 			.*)
# 				;&
# 			*/.*)
# 				continue
# 		esac

# 		printf "%s %s\0" "$( getctime "$file" )" "$name"
# 	done < <(find "$from_dir" -type f -print0 ) \
# 	| sort -r -n -z -k1 \
# 	| gawk '
# 		BEGIN {
# 			RS="\0"
# 			ORS="\0"
# 		}
# 		{
# 			r=$1" "
# 			sub(r, "")
# 			print
# 		}
# 	'

# 	[ "${PIPESTATUS[0]:-0}" -ne 0 ] && return_error
# 	[ "${PIPESTATUS[1]:-0}" -ne 0 ] && return_error
# 	[ "${PIPESTATUS[2]:-0}" -ne 0 ] && return_error

# 	return 0
# }

#
# just converts the \0 delimited output
# of list_time_sorted_null_term() to newline
# delimited.
#
list_time_sorted() {
	local from_dir=$1
	local retval

	list_time_sorted_null_term "$from_dir" | tr '\0' '\n'

	[ "${PIPESTATUS[0]:-0}" -ne 0 ] && return_error
	[ "${PIPESTATUS[1]:-0}" -ne 0 ] && return_error

	return 0
}

#
# param1: header
#   This is the heading of fzf search
#
# param2: from_dir
#   The directory where fzf search needs to be done
#
# and rest of args are passed to fzf
#
fzf_search() {
	local header=$1 ; shift
	local from_dir=$1 ; shift

	list_time_sorted_null_term "$from_dir" \
		| fzf -0 --read0 --reverse --height=40% --cycle --header="$header" "$@" || return_error
}

#
# same as fzf_search except it supports
# multiple selection
#
fzf_multi_select_search() {
	local header=$1 ; shift
	local from_dir=$1 ; shift

	list_time_sorted_null_term "$from_dir" \
		| fzf -m -0 --read0 --reverse --height=40% --cycle --header="$header" "$@" || return_error
}

#
# Description:
#  This is used when we maybe overwriting a file.
#  This checks if a path exists and if it is a file and not empty,
#  user is asked if file should be overwritten or not.
#
# retval:
#  0  : can write to path
#  1  : don't write to path
#
# param1:
#  path to be checked
#
prompt_if_overwrite() {
	local path=$1

	exists_but_not_file "$path" && return 1
	[ ! -f "$path" ] && return 0
	[ -z "$( < "$path" )" ] && return 0

	printf "%s\n"                            \
			"The file $path already exists." \
			"Should we overwrite it?"

	select user_answer in 'Yes' 'No'
	do
		case "$user_answer" in
			'Yes')
				return 0
				;;
			'No')
				return 1
				;;
		esac
	done

	return 0
}

#
# param1: replacee
#
# param2: replacement
#
# param3: text in which replacement needs to be made
#
# output: text with replacements
#
replace() {
	local replacee=$1 ; shift
	local replacement=$1 ; shift
	local text=$1

	gawk -v replacee="$replacee"       \
	     -v replacement="$replacement" \
	'
	BEGIN { RS="\0" }

	# MAIN
	{
		gsub(replacee, replacement)
		print
	}
	' <<<"$text" || return_error
}

# Purpose of this func is to put single quotes
# around str so that when it is passed to bash -c,
# spaces in the path are sustained and
# not treated as individual args

# as we are going to put single quotes around
# full_path, we need to replace any existing single
# quotes in the string with '"'"'
# refer to https://stackoverflow.com/a/1250279/11498773
put_single_quotes() {
	local str=$1

	str="$( replace "'"   "'\"'\"'"   "$str" )" || return_error
	printf "%s" "'$str'"
}

is_bashv4() {
	if [ -n "$BASH_VERSINFO" ]
	then
		if [ $BASH_VERSINFO -lt 4 ]
		then
			return 1
		fi

		return 0
	fi

	return 1
}

fpreprocess() {
	preprocess \
		2 "$PROGRAM_FUNC_DIR" "$USER_FUNC_DIR" \
		2 "$PROGRAM_ALIAS_FILE_PATH" "$ALIAS_FILE_PATH" \
		1 "$RENAME_FILE_PATH" || return_error
}

#
# Description:
#   Sets $FILE_TO_OPEN_KEY in current defaults. This is done
#   so that [VAR]() replacement can happen for FILE_TO_OPEN.
#
#   The file is then touched to modify its timestamps and also so
#   that it exists in case it didn't exist before.
#
#   Way to open is fetched fron user config file and stored in a variable.
#   The variable is passed to bash -c to get executed.
#
# param1: file to open
#
open_file() {
	local file=$1 ; shift
	local open

	touch "$file" || return_error

	file="$( put_single_quotes "$file" )" || return_error

	set_in_current_defaults "$FILE_TO_OPEN_KEY" "$file" || return_error

	open="$(get_from_user_config_file_or_default "$HOW_TO_OPEN_EDITOR_KEY")" || return_error

	"$CLIUM_BASH" -c "$open" || return_error
}

#
# in a list of files sorted in order of
# access time, it prints the n^th
# newest file where n is param2.
#
# param1: directory
#
# param2: relative cnt
#
get_by_relative_cnt() {
	local dir=$1; shift
	local cnt=$1
	local nth_file

	if ! is_num "$cnt"
	then
		a_echo_err "$cnt: invalid relative count"
		return_error
	fi

	nth_file="$(
		list_time_sorted_null_term "$dir" | gawk -v line="$cnt" '
			BEGIN {
				RS="\0"
			}
			NR == line {
				print
			}
	')" || return_error

	[ -z "$nth_file" ] && {
		a_echo_err "No file at realtive count $cnt"
		return_error
	}

	printf "%s" "$nth_file"
}

# Returns full path of script's directory in which it is called
alias script_dir='(cur_dir="$(dirname $BASH_SOURCE)"; cd "$cur_dir" && pwd)' 

shopt -s expand_aliases
