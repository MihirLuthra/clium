#! /usr/bin/env bash

[ -n "$__SUB_COMMANDS_COMMON__" ] && return 0
readonly __SUB_COMMANDS_COMMON__=1

set -e
source "$QT_COMMON_PATH"/error_handler
source "$QT_COMMON_PATH"/constants
source "$QT_COMMON_PATH"/utility_funcs
source "$QT_COMMON_PATH"/data_interface
set +e

#
# Functions in this file assume that
# the args are parser using parse_options().
#

# >>> Direct options

option_config_file() {
	local prog_name

	prog_name="$(basename "$0")" || return_error
	open_file "$( dirname $0 )/$prog_name.qtc" || return_error
}

option_help() {
	less "$( dirname $0 )/help.txt"
}

#
# This func works on the assumption
# that the caller has taken user input to rename
# the file as per the schema '1 -1'.
# It checks ARGS_CNT[] array for the number of args passed.
# If the arg cnt is 1, it opens an fzf search menu to
# search give user the option to select from param1 directory.
# That being the old file is renamed to ARGS[$option,0].
#
# If 2 args are supplied, they should be in the order
# <old_name> then <new_name>.
#
# param1: directory for fzf_search
#
# param2 (opt): header message for fzf_search
# default: 'SELECT FILE TO RENAME:(-r)'
#
# param3 (opt): key to use in ARGS[]
# default: -r
#
# THROWS
#
rename_file() {
	local dir=$1 ; shift
	local message=$1 ; shift
	local option=$1
	local old_name
	local old_path
	local new_name
	local new_path

	[ -z "$message" ] && message='SELECT FILE TO RENAME:(-r)'
	[ -z "$option" ] && option='-r'

	if [ ${ARG_CNT[$option]} -eq 1 ]
	then
		old_name="$( fzf_search "$message" "$dir" )" || return_error
		new_name=${ARGS[$option,0]}
	else
		old_name=${ARGS[$option,0]}
		new_name=${ARGS[$option,1]}
	fi

	old_path="$dir/$old_name"
	new_path="$dir/$new_name"

	print_if_not_file "$old_path" && return_error

	mv "$old_path" "$new_path" || return_error
}

#
# It gets the value for key DEFAULT_ARGS
# from the config file of the caller command.
#
# output: prints args on stdout
#
# THROWS
#
get_default_args() {
	local qtc_file
	local default_options
	local prog_name

	prog_name="$(basename "$0")"
	qtc_file="$( dirname "$0" )/$prog_name.qtc"

	default_options="$( get_value_for_key "$qtc_file" "$DEFAULT_ARGS_KEY" )" || {
		a_printf_err \
			"No default args set for $prog_name" \
			"Set key $DEFAULT_ARGS_KEY by $prog_name --config-file"
		return_error
	}

	printf "%s" "$default_options"
}

#
# It quotes all args so they can be passed to bash -c ''
# and interpreted in the same way as if they were passed
# directly by the user.
# It takes the args from ARGS[] array.
#
# param1: key to use in ARGS array
#
# param2: starting index in args array
#
# output: prints args on stdout
#
# THROWS
#
forward_args() {
	local key=$1 ; shift
	local start_idx=$1

	local last_arg
	local constructed_args

	last_arg="$( expr ${ARG_CNT[$key]} - 1 )"

	if [ $last_arg -ge $start_idx ]
	then
		for arg_no in $(seq $start_idx $last_arg)
		do
			constructed_args="$constructed_args $( put_single_quotes "${ARGS[$key,$arg_no]}" )" || return_error
		done
	fi

	printf "%s" "$constructed_args"
}

#
# It checks the ARGS_CNT[] array if it has the
# desired arg. If not, it opens a fzf_search()
# menu for selection.
#
# param1: directory for fzf search
#
# param2: heading message for fzf search
#
# param3: option to be used in ARGS_CNT[]/ARGS[]
#
# output: prints arg/fzf-selection on stdout
#
# THROWS
#
arg_or_fzf_search() {
	local dir=$1 ; shift
	local message=$1 ; shift
	local option=$1 ; shift
	local file
	local full_path

	if [ ${ARG_CNT[$option]:-0} -eq 1 ]
	then
		file=${ARGS[$option,0]}
	else
		file="$( fzf_search "$message" "$dir" )" || return_error
		[ -z "$file" ] && return_error
	fi

	full_path="$dir/$file"
	print_if_not_file "$full_path" && return_error

	printf "%s" "$full_path"
}

#
# It checks the ARGS_CNT[] array if it has the
# desired arg. If not, it opens a fzf_multi_select_search()
# menu for selection. For every args, it executes an action
# as per action_template. The action template may contain
# some text which gets replace with the current file.
# e.g., if param4 is 'rm __TO_REPLACE__' and param5 is '__TO_REPLACE__',
# every file selected by the user will get removed.
#
# param1: directory for fzf search
#
# param2: heading message for fzf search
#
# param3: option to be used in ARGS_CNT[]/ARGS[]
#
# param4: action template to perform of every selected file
#
# param5: text to be replaced with current file in action template
#
# param6: if the action specified by action_template files, return_error
#         is called if this arg is not null
#
# output: prints arg/fzf-selections(space delimited) and
#         single quoted (by put_single_quotes()) on stdout.
#
# THROWS
#
args_or_fzf_multi_search() {
	local dir=$1 ; shift
	local message=$1 ; shift
	local option=$1 ; shift
	local action_template=$1 ; shift
	local replacee=$1 ; shift
	local return_on_fail=$1 ; shift
	local files
	local full_path
	local last_arg
	local arg_no
	local temp_file
	local retval

	declare -a ret_arr

	if [ ${ARG_CNT[$option]:-0} -ge 1 ]
	then
		last_arg="$( expr ${ARG_CNT[$option]} - 1 )"
		for arg_no in $(seq 1 "$last_arg")
		do
			files+=( "${ARGS[$option,$arg_no]}" )
		done
	else
		temp_file="$(mktemp)" || return_error
		# reading null terminated fzf results into an array
		IFS= readarray -t -d '' files < <( fzf_multi_select_search "$message" "$dir" --print0 ; \
			echo $? > "$temp_file")

		retval="$( < "$temp_file" )"
		rm "$temp_file"

		[ "$retval" -ne 0 ] && return_error
	fi

	for file in "${files[@]}"
	do
		full_path="$dir/$file"
		print_if_not_file "$full_path" && return_error

		full_path="$( put_single_quotes "$full_path" )"

		ret_arr+=( "$full_path" )

		if [ -n "$action_template" ]
		then
			action="$( replace "$replacee" "$full_path" "$action_template" )" || return_error
			"${QTBASH}" -c "$action" ; retval=$?
			[ -n "$return_on_fail" ] && [ "$retval" -ne 0 ] && return_error
		fi
	done

	printf "%s " "${ret_arr[@]}"
}

#
# wrapper around args_or_fzf_multi_search()
# for removing files.
#
# param1: directory for fzf search
#
# param2: message for fzf search heading
#
# THROWS
#
delete_files() {
	local dir=$1 ; shift
	local message=$1
	local action

	action='rm -i __TO_REPLACE__'

	args_or_fzf_multi_search "$dir" "$message" '-d' "$action" '__TO_REPLACE__' '1' > /dev/null \
		|| return_error
}

#
# wrapper around args_or_fzf_multi_search()
# for opening files.
#
# param1: directory for fzf search
#
# param2: message for fzf search heading
#
# param3: option to use in ARGS/ARGS_CNT
#
# THROWS
#
open_files() {
	local dir=$1 ; shift
	local message=$1 ; shift
	local option=$1
	local action
	local files_to_open

	action='touch __TO_REPLACE__'

	files_to_open="$( args_or_fzf_multi_search "$dir" "$message" "$option" "$action" '__TO_REPLACE__' '1' )" \
		|| return_error

	set_in_current_defaults "$FILE_TO_OPEN_KEY" "$files_to_open" || return_error

	open="$(get_from_user_config_file_or_default "$HOW_TO_OPEN_EDITOR_KEY")" || return_error

	"$QTBASH" -c "$open" || return_error
}
